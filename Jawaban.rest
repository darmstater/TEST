//JAWABAN SOAL TEST SKILL BACKEND

##########################################################################################
//1. Implementasikan sebuah route pada Express.js untuk mengambil data dari database dan mengirimkannya sebagai respons JSON
GET http://localhost:3000/perusahaan
Content-Type: application/json

{
}

# getAll: async(req, res) => {
#         const sqlOption = {
#             attributes:[
#                 "id",
#                 "name",
#             ]
#         }
#         const perusahaan = await Perusahaan.findAndCountAll(sqlOption);
#         return res.json({
#             status: "Berhasil!",
#             data: {
#                 perusahaan: perusahaan.rows,
#             }
#         });


##########################################################################################
//2. Buatlah middleware Express.js untuk mengecek keberadaan token JWT pada setiaprequest dan memberikan akses hanya kepada pengguna yang memiliki token yangvalid.
//authServer.js
//server.js
//
//KETIKKAN NAMA USER UNTUK DAPAT TOKEN
POST http://localhost:4000/login
Content-Type: application/json

{
  "username": "Baskoro"
}
###
//MASUKKAN TOKEN JADI TERLIHAT USERNAME SI PEMILIK TOKEN
GET http://localhost:5000/posts
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQmFza29ybyIsImlhdCI6MTcwNzIwMDk5NiwiZXhwIjoxNzA3MjAxMDExfQ.RkIQtNV3EYHIfQUVnruzfHOsBRs99n_9Pu2EjqwV9p4

###
//SETELAH DI DELETE TOKEN JUGA HILANG
DELETE http://localhost:4000/logout
Content-Type: application/json

{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQmFza29ybyIsImlhdCI6MTcwNzIwMDc5NiwiZXhwIjoxNzA3MjAwODExfQ.Pd5etBEnfmUz7mzkzqMUVg5RZLnT7tf_BzHPmSKhzlE"
}

###
POST http://localhost:4000/token
Content-Type: application/json

{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQmFza29ybyIsImlhdCI6MTcwNzIwMDc5NiwiZXhwIjoxNzA3MjAwODExfQ.Pd5etBEnfmUz7mzkzqMUVg5RZLnT7tf_BzHPmSKhzlE"
}

###
###
##########################################################################################
//3. Buat sebuah fungsi asinkron dengan menggunakan async/await untuk mengambil data dari API eksternal menggunakan Node.js axios.
GET http://localhost:3000/axios
Content-Type: application/json

{
}

# controller.getAll = async function (req, res) {
#   try {
#     const response = await axios.get('https://jsonplaceholder.typicode.com/comments');

#     res.status(200).json({
#       message: 'API Eksternal',
#       data: response.data
#     });
#   } catch (error) {
#     res.status(404).json({
#       message: error.message
#     });
#   }
# }

##########################################################################################
//4. Implementasikan fitur pengunggahan file (file upload) menggunakan Express.js danmenyimpan file di server
POST http://localhost:3000/upload
Content-Type: application/json

{
    "keterangan" : "asdf",
    "filepdf" : "albert.pdf",
    "filefoto" : "cvalbert.jpg"
}

##########################################################################################
//5. Tuliskan query SQL untuk mengambil semua data dari dua tabel yang berbeda dengan melakukan join berdasarkan kolom tertentu.
GET http://localhost:3000/posts
Content-Type: application/json

{
    {
    "keterangan" : "albert",
    "filepdf" : "albert.pdf",
    "filefoto" : "cvalbert.jpg"
}



##########################################################################################
//6. Implementasikan transaksi di MySQL menggunakan Node.js, di mana dua query atau lebih akan dieksekusi secara transaksional.
POST http://localhost:3000/transaksi
Content-Type: application/json

{
    "pengirim_id" : 4,
    "penerima_id" : 1,
    "jumlah_transfer" : 10
}
##########################################################################################


##########################################################################################
//7.Implementasikan operasi CRUD (Create, Read, Update, Delete) untuk sebuah entitas tertentu dalam database MySQL menggunakan Node.js
POST http://localhost:3000/karyawan/create
Content-Type: application/json

{
    "name" : "Baskoro", 
    "jenis_kelamin" : "Laki-laki", 
    "email" : "neeb@gmail.com", 
    "perusahaan_id" : 1
}

#############
GET http://localhost:3000/karyawan/read
Content-Type: application/json

{
}

#############
PUT http://localhost:3000/karyawan/update/:id
Content-Type: application/json

//tambhakan id
{
    "name": "Baskoro Baru",
    "jenis_kelamin": "Perempuan",
    "email": "baskoro.baru@gmail.com",
    "perusahaan_id": 2
}

##############

DELETE http://localhost:3000/karyawan/delete/:id
Content-Type: application/json

//tambhakan id
{

}

##########################################################################################
//8.Buatlah API endpoint menggunakan Express.js untuk menangani operasi CRUD pada entitas yang sudah Anda implementasikan di database MySQL.
// ada di test/route/karyawan.js
//  router.post("/create", createKaryawan);
// router.use("/read", getKaryawan);
// router.put("/update/:id", updateKaryawan);
// router.delete("/delete/:id", deleteKaryawan);

##########################################################################################
//9. Implementasikan mekanisme penanganan kesalahan (error handling) di dalamAPI endpoint yang Anda buat, termasuk menangani kesalahan validasi input.
// ada di test/route/karyawan.js

